(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
  typeof define === 'function' && define.amd ? define(['react'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.useRefs = factory(global.React));
})(this, (function (react) { 'use strict';

  const MAX_ITERATIONS_COUNT = 50;

  function iterator() {
    return this;
  }

  function useMultipleRefs(initialValue) {
    let count = 0;

    return {
      next() {
        if (++count > MAX_ITERATIONS_COUNT) {
          throw new Error(
            "useMultipleRefs: reached more than 50 refs. This hook can be used exclusively with the array destructuring syntax."
          );
        }

        return {
          done: false,
          value: react.useRef(initialValue),
        };
      },
      [Symbol.iterator]: iterator,
    };
  }

  return useMultipleRefs;

}));
